/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,8],$V2=[1,15],$V3=[1,10],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[1,16],$V8=[5,11,13,16,37,58,59,60,61],$V9=[1,23],$Va=[1,26],$Vb=[34,41],$Vc=[2,30],$Vd=[1,28],$Ve=[1,34],$Vf=[1,41],$Vg=[1,32],$Vh=[1,33],$Vi=[1,36],$Vj=[1,37],$Vk=[1,38],$Vl=[1,39],$Vm=[1,40],$Vn=[1,45],$Vo=[5,11,13,15,16,27,36,37,45,47,48,51,52,53,55,58,59,60,61,63,69,77,78,79,80,81],$Vp=[1,54],$Vq=[1,60],$Vr=[1,61],$Vs=[1,56],$Vt=[1,57],$Vu=[1,58],$Vv=[1,59],$Vw=[1,62],$Vx=[1,63],$Vy=[1,64],$Vz=[1,65],$VA=[1,66],$VB=[1,67],$VC=[1,68],$VD=[1,69],$VE=[1,70],$VF=[20,33,34,35,41,62,63,64,65,66,67,68,70,71,72,73,74,75],$VG=[1,83],$VH=[1,89],$VI=[1,91],$VJ=[1,93],$VK=[1,94],$VL=[1,92],$VM=[1,95],$VN=[1,96],$VO=[1,97],$VP=[34,54],$VQ=[20,41],$VR=[20,34,41,62,63,64,65,66,67,68,70,71,72,73,74,75],$VS=[5,11,13,16,27,36,37,45,47,48,51,52,53,55,58,59,60,61],$VT=[16,27,36,37,45,47,48,51,52,53,55,58,59,60,61],$VU=[33,35],$VV=[2,25],$VW=[1,123],$VX=[20,34,41,62,63,66,67,68,70,71,72,73,74,75],$VY=[20,34,41,66,67,68,70,71,72,73],$VZ=[20,34,41,66,67,68,72,73],$V_=[20,34,41,66,67,68,70,71,72,73,74,75],$V$=[15,37,63,69,77,78,79,80,81];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"ARGUMENTOS":4,"EOF":5,"ARGUMENTOS1":6,"FUNCION":7,"DECLARACION":8,"ASIGNACION":9,"MAIN":10,"public_":11,"static_":12,"void_":13,"main_":14,"abrirPar_":15,"String_":16,"abrirCor_":17,"cerrarCor_":18,"args_":19,"cerrarPar_":20,"BLOQUE_SENTENCIAS":21,"SENTENCIAS":22,"SENTENCIAS_G":23,"FOR":24,"WHILE":25,"DOWHILE":26,"IF":27,"BREAK":28,"CONTINUE":29,"RETURN":30,"LLAMADAMETODO":31,"JUSTID":32,"incremento_":33,"puntocoma_":34,"decremento_":35,"PRINT1":36,"identificador_":37,"LISTA_PARAMETROS":38,"TIPO":39,"COSASDECLARACION":40,"coma_":41,"COSASDECLA":42,"igual_":43,"EXPRESION":44,"while_":45,"CONDICION":46,"do_":47,"for_":48,"DECLARACIONASIGNACION":49,"INCRDCR":50,"break_":51,"continue_":52,"return_":53,"abrirLlave_":54,"cerrarLlave_":55,"PARAMETROS":56,"PARAM":57,"int_":58,"boolean_":59,"double_":60,"char_":61,"mas_":62,"menos_":63,"por_":64,"division_":65,"or_":66,"and_":67,"xor_":68,"not_":69,"mayorIgual_":70,"menorIgual_":71,"dosIgual_":72,"distinto_":73,"mayor_":74,"menor_":75,"PRIMITIVO":76,"decimal_":77,"numero_":78,"cadena_":79,"true_":80,"false_":81,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"public_",12:"static_",13:"void_",14:"main_",15:"abrirPar_",16:"String_",17:"abrirCor_",18:"cerrarCor_",19:"args_",20:"cerrarPar_",27:"IF",33:"incremento_",34:"puntocoma_",35:"decremento_",36:"PRINT1",37:"identificador_",41:"coma_",43:"igual_",45:"while_",47:"do_",48:"for_",51:"break_",52:"continue_",53:"return_",54:"abrirLlave_",55:"cerrarLlave_",58:"int_",59:"boolean_",60:"double_",61:"char_",62:"mas_",63:"menos_",64:"por_",65:"division_",66:"or_",67:"and_",68:"xor_",69:"not_",70:"mayorIgual_",71:"menorIgual_",72:"dosIgual_",73:"distinto_",74:"mayor_",75:"menor_",77:"decimal_",78:"numero_",79:"cadena_",80:"true_",81:"false_"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[10,11],[22,2],[22,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,3],[23,3],[23,1],[31,3],[32,1],[8,3],[40,3],[40,1],[42,3],[42,1],[9,4],[25,3],[26,5],[46,3],[24,8],[28,2],[29,2],[30,3],[49,1],[49,1],[49,3],[49,3],[50,2],[50,2],[21,3],[21,2],[7,4],[7,4],[7,4],[7,4],[38,3],[38,2],[56,3],[56,1],[57,2],[39,1],[39,1],[39,1],[39,1],[39,1],[44,3],[44,3],[44,3],[44,3],[44,2],[44,2],[44,2],[44,3],[44,3],[44,3],[44,2],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		var root = new AST($$[$0-1]);
		return root; 
	
break;
case 2: case 9:

		$$[$0-1].push($$[$0]);
		this.$ = $$[$0-1];
	  
break;
case 3: case 10: case 28: case 54:

		this.$ = [$$[$0]];
	
break;
case 4: case 5: case 6: case 7: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 23: case 39: case 40: case 79:
 this.$ = $$[$0]; 
break;
case 8:

		this.$ = new Main($$[$0-7], $$[$0], this._$.first_line, this._$.first_column)
	
break;
case 21: case 41:
 this.$ = new OperacionAritmetica( TipoDeOperacion.INCREMENTO, $$[$0-2], null, this._$.first_line, this._$.first_column); 
break;
case 22: case 42:
 this.$ = new OperacionAritmetica( TipoDeOperacion.DECREMENTO, $$[$0-2], null, this._$.first_line, this._$.first_column); 
break;
case 24:
 this.$ = new LlamadaMetodo($$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 25: case 85:
 this.$ = new Identificador( $$[$0], this._$.first_line, this._$.first_column); 
break;
case 26:
 this.$ = new Declaracion($$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 27: case 53:

		$$[$0-2].push($$[$0]);
		this.$ = $$[$0-2];
	  
break;
case 29:
 this.$ = new FullAsig($$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 30:
 this.$ = new MedAsig($$[$0], this._$.first_line, this._$.first_column); 
break;
case 31:
 this.$ = new Asignacion($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 32:
 this.$ = new While($$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 33:
 this.$ = new DoWhile($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 34: case 45: case 51:
 this.$ = $$[$0-1]; 
break;
case 35:
 this.$ = new For($$[$0-5], $$[$0-4],$$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 36:
 this.$ = new Break($$[$0-1], this._$.first_line, this._$.first_column)
break;
case 37:
 this.$ = new Continue($$[$0-1], this._$.first_line, this._$.first_column)
break;
case 38:
 this.$ = new Return($$[$0-2],$$[$0-1], this._$.first_line, this._$.first_column)
break;
case 43: case 65:
 this.$ = new OperacionAritmetica( TipoDeOperacion.INCREMENTO, $$[$0-1], null, this._$.first_line, this._$.first_column); 
break;
case 44: case 66:
 this.$ = new OperacionAritmetica( TipoDeOperacion.DECREMENTO, $$[$0-1], null, this._$.first_line, this._$.first_column); 
break;
case 46: case 52:
 this.$ = [] 
break;
case 47:
 this.$ = new Funcion(Tipo.VOID, $$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 48:
 this.$ = new Funcion($$[$0-3], $$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 49:
 this.$ = new DeclFuncion(Tipo.VOID, $$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 50:
 this.$ = new DeclFuncion($$[$0-3], $$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 55:
this.$ = new Parametro($$[$0-1], $$[$0], this._$.first_line, this._$.first_column)
break;
case 56:
 this.$ = Tipo.INT 
break;
case 57:
 this.$ = Tipo.BOOLEAN 
break;
case 58:
 this.$ = Tipo.DOUBLE 
break;
case 59:
 this.$ = Tipo.STRING 
break;
case 60:
 this.$ = Tipo.CHAR 
break;
case 61:
 this.$ = new OperacionAritmetica( TipoDeOperacion.SUMA, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 62:
 this.$ = new OperacionAritmetica( TipoDeOperacion.RESTA, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 63:
 this.$ = new OperacionAritmetica( TipoDeOperacion.MULTIPLICACION, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 64:
 this.$ = new OperacionAritmetica( TipoDeOperacion.DIVISION, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 67:
 this.$ = new OperacionAritmetica( TipoDeOperacion.NEGATIVO, $$[$0], null, this._$.first_line, this._$.first_column); 
break;
case 68:
 this.$ = new OperacionLogica( TipoDeOperacion.OR, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 69: case 70:
 this.$ = new OperacionLogica( TipoDeOperacion.AND, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 71:
 this.$ = new OperacionLogica( TipoDeOperacion.NOT, $$[$0], null, this._$.first_line, this._$.first_column); 
break;
case 72:
 this.$ = new OperacionRelacional( TipoDeOperacion.MAYORIGUAL, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 73:
 this.$ = new OperacionRelacional( TipoDeOperacion.MENORIGUAL, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 74:
 this.$ = new OperacionRelacional( TipoDeOperacion.DOSIGUAL, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 75:
 this.$ = new OperacionRelacional( TipoDeOperacion.DISTINTO, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 76:
 this.$ = new OperacionRelacional( TipoDeOperacion.MAYOR, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 77:
 this.$ = new OperacionRelacional( TipoDeOperacion.MENOR, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 78:
 this.$ = new Parentesis( $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 80: case 81: case 82:
 this.$ = new Primitivo( $$[$0], this._$.first_line, this._$.first_column); 
break;
case 83:
 this.$ = new Primitivo( true, this._$.first_line, this._$.first_column); 
break;
case 84:
 this.$ = new Primitivo( false, this._$.first_line, this._$.first_column); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:$V0,13:$V1,16:$V2,37:$V3,39:9,58:$V4,59:$V5,60:$V6,61:$V7},{1:[3]},{5:[1,17],6:18,7:4,8:5,9:6,10:7,11:$V0,13:$V1,16:$V2,37:$V3,39:9,58:$V4,59:$V5,60:$V6,61:$V7},o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,5]),o($V8,[2,6]),o($V8,[2,7]),{37:[1,19]},{37:[1,20],40:21,42:22},{43:$V9},{12:[1,24]},{37:[2,56]},{37:[2,57]},{37:[2,58]},{37:[2,59]},{37:[2,60]},{1:[2,1]},o($V8,[2,2]),{15:$Va,38:25},o($Vb,$Vc,{38:27,15:$Va,43:$Vd}),{34:[1,29],41:[1,30]},o($Vb,[2,28]),{15:$Ve,37:$Vf,44:31,63:$Vg,69:$Vh,76:35,77:$Vi,78:$Vj,79:$Vk,80:$Vl,81:$Vm},{13:[1,42]},{21:43,34:[1,44],54:$Vn},{16:$V2,20:[1,47],39:49,56:46,57:48,58:$V4,59:$V5,60:$V6,61:$V7},{21:50,34:[1,51],54:$Vn},{15:$Ve,37:$Vf,44:52,63:$Vg,69:$Vh,76:35,77:$Vi,78:$Vj,79:$Vk,80:$Vl,81:$Vm},o($Vo,[2,26]),{37:$Vp,42:53},{33:$Vq,34:[1,55],35:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE},{15:$Ve,37:$Vf,44:71,63:$Vg,69:$Vh,76:35,77:$Vi,78:$Vj,79:$Vk,80:$Vl,81:$Vm},{15:$Ve,37:$Vf,44:72,63:$Vg,69:$Vh,76:35,77:$Vi,78:$Vj,79:$Vk,80:$Vl,81:$Vm},{15:$Ve,37:$Vf,44:73,63:$Vg,69:$Vh,76:35,77:$Vi,78:$Vj,79:$Vk,80:$Vl,81:$Vm},o($VF,[2,79]),o($VF,[2,80]),o($VF,[2,81]),o($VF,[2,82]),o($VF,[2,83]),o($VF,[2,84]),o($VF,[2,85]),{14:[1,74]},o($V8,[2,47]),o($V8,[2,49]),{8:78,9:79,16:$V2,22:75,23:77,24:80,25:81,26:82,27:$VG,28:84,29:85,30:86,31:87,32:88,36:$VH,37:$VI,39:90,45:$VJ,47:$VK,48:$VL,51:$VM,52:$VN,53:$VO,55:[1,76],58:$V4,59:$V5,60:$V6,61:$V7},{20:[1,98],41:[1,99]},o($VP,[2,52]),o($VQ,[2,54]),{37:[1,100]},o($V8,[2,48]),o($V8,[2,50]),o($Vb,[2,29],{33:$Vq,35:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE}),o($Vb,[2,27]),o($Vb,$Vc,{43:$Vd}),o($Vo,[2,31]),{15:$Ve,37:$Vf,44:101,63:$Vg,69:$Vh,76:35,77:$Vi,78:$Vj,79:$Vk,80:$Vl,81:$Vm},{15:$Ve,37:$Vf,44:102,63:$Vg,69:$Vh,76:35,77:$Vi,78:$Vj,79:$Vk,80:$Vl,81:$Vm},{15:$Ve,37:$Vf,44:103,63:$Vg,69:$Vh,76:35,77:$Vi,78:$Vj,79:$Vk,80:$Vl,81:$Vm},{15:$Ve,37:$Vf,44:104,63:$Vg,69:$Vh,76:35,77:$Vi,78:$Vj,79:$Vk,80:$Vl,81:$Vm},o($VF,[2,65]),o($VF,[2,66]),{15:$Ve,37:$Vf,44:105,63:$Vg,69:$Vh,76:35,77:$Vi,78:$Vj,79:$Vk,80:$Vl,81:$Vm},{15:$Ve,37:$Vf,44:106,63:$Vg,69:$Vh,76:35,77:$Vi,78:$Vj,79:$Vk,80:$Vl,81:$Vm},{15:$Ve,37:$Vf,44:107,63:$Vg,69:$Vh,76:35,77:$Vi,78:$Vj,79:$Vk,80:$Vl,81:$Vm},{15:$Ve,37:$Vf,44:108,63:$Vg,69:$Vh,76:35,77:$Vi,78:$Vj,79:$Vk,80:$Vl,81:$Vm},{15:$Ve,37:$Vf,44:109,63:$Vg,69:$Vh,76:35,77:$Vi,78:$Vj,79:$Vk,80:$Vl,81:$Vm},{15:$Ve,37:$Vf,44:110,63:$Vg,69:$Vh,76:35,77:$Vi,78:$Vj,79:$Vk,80:$Vl,81:$Vm},{15:$Ve,37:$Vf,44:111,63:$Vg,69:$Vh,76:35,77:$Vi,78:$Vj,79:$Vk,80:$Vl,81:$Vm},{15:$Ve,37:$Vf,44:112,63:$Vg,69:$Vh,76:35,77:$Vi,78:$Vj,79:$Vk,80:$Vl,81:$Vm},{15:$Ve,37:$Vf,44:113,63:$Vg,69:$Vh,76:35,77:$Vi,78:$Vj,79:$Vk,80:$Vl,81:$Vm},o($VR,[2,67],{33:$Vq,35:$Vr}),o($VR,[2,71],{33:$Vq,35:$Vr}),{20:[1,114],33:$Vq,35:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE},{15:[1,115]},{8:78,9:79,16:$V2,23:117,24:80,25:81,26:82,27:$VG,28:84,29:85,30:86,31:87,32:88,36:$VH,37:$VI,39:90,45:$VJ,47:$VK,48:$VL,51:$VM,52:$VN,53:$VO,55:[1,116],58:$V4,59:$V5,60:$V6,61:$V7},o($VS,[2,46]),o($VT,[2,10]),o($VT,[2,11]),o($VT,[2,12]),o($VT,[2,13]),o($VT,[2,14]),o($VT,[2,15]),o($VT,[2,16]),o($VT,[2,17]),o($VT,[2,18]),o($VT,[2,19]),o($VT,[2,20]),{33:[1,118],35:[1,119]},o($VT,[2,23]),{37:$Vp,40:21,42:22},o($VU,$VV,{38:120,15:$Va,43:$V9}),{15:[1,121]},{15:$VW,46:122},{21:124,54:$Vn},{34:[1,125]},{34:[1,126]},{15:$Ve,37:$Vf,44:127,63:$Vg,69:$Vh,76:35,77:$Vi,78:$Vj,79:$Vk,80:$Vl,81:$Vm},o($VP,[2,51]),{16:$V2,39:49,57:128,58:$V4,59:$V5,60:$V6,61:$V7},o($VQ,[2,55]),o($VX,[2,61],{33:$Vq,35:$Vr,64:$Vu,65:$Vv}),o($VX,[2,62],{33:$Vq,35:$Vr,64:$Vu,65:$Vv}),o($VR,[2,63],{33:$Vq,35:$Vr}),o($VR,[2,64],{33:$Vq,35:$Vr}),o([20,34,41,66],[2,68],{33:$Vq,35:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,67:$Vx,68:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE}),o([20,34,41,66,67],[2,69],{33:$Vq,35:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,68:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE}),o([20,34,41,66,67,68],[2,70],{33:$Vq,35:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE}),o($VY,[2,72],{33:$Vq,35:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,74:$VD,75:$VE}),o($VY,[2,73],{33:$Vq,35:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,74:$VD,75:$VE}),o($VZ,[2,74],{33:$Vq,35:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,70:$Vz,71:$VA,74:$VD,75:$VE}),o($VZ,[2,75],{33:$Vq,35:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,70:$Vz,71:$VA,74:$VD,75:$VE}),o($V_,[2,76],{33:$Vq,35:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv}),o($V_,[2,77],{33:$Vq,35:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv}),o($VF,[2,78]),{16:[1,129]},o($VS,[2,45]),o($VT,[2,9]),{34:[1,130]},{34:[1,131]},{34:[1,132]},{8:134,9:135,16:$V2,32:136,37:[1,137],39:90,49:133,58:$V4,59:$V5,60:$V6,61:$V7},{21:138,54:$Vn},{15:$Ve,37:$Vf,44:139,63:$Vg,69:$Vh,76:35,77:$Vi,78:$Vj,79:$Vk,80:$Vl,81:$Vm},{45:[1,140]},o($VT,[2,36]),o($VT,[2,37]),{33:$Vq,34:[1,141],35:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE},o($VQ,[2,53]),{17:[1,142]},o($VT,[2,21]),o($VT,[2,22]),o($VT,[2,24]),{15:$Ve,37:$Vf,44:143,63:$Vg,69:$Vh,76:35,77:$Vi,78:$Vj,79:$Vk,80:$Vl,81:$Vm},o($V$,[2,39]),o($V$,[2,40]),{33:[1,144],35:[1,145]},o($VU,$VV,{43:$V9}),o($VT,[2,32]),{20:[1,146],33:$Vq,35:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE},{15:$VW,46:147},o($VT,[2,38]),{18:[1,148]},{33:$Vq,34:[1,149],35:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE},{34:[1,150]},{34:[1,151]},o($VP,[2,34]),{34:[1,152]},{19:[1,153]},{32:155,37:[1,156],50:154},o($V$,[2,41]),o($V$,[2,42]),o($VT,[2,33]),{20:[1,157]},{20:[1,158]},{33:[1,159],35:[1,160]},o($VU,$VV),{21:161,54:$Vn},{21:162,54:$Vn},{20:[2,43]},{20:[2,44]},o($V8,[2,8]),o($VT,[2,35])],
defaultActions: {12:[2,56],13:[2,57],14:[2,58],15:[2,59],16:[2,60],17:[2,1],159:[2,43],160:[2,44]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	const { Instruccion } = require("../dist/ast/Instruccion");
	const { AST } = require("../dist/ast/AST");
	const { Asignacion } = require("../dist/ast/sentencias/Asignacion");
	const { Declaracion } = require("../dist/ast/sentencias/Declaracion");
	const { Print } = require("../dist/ast/sentencias/Print");
	const { While } = require("../dist/ast/sentencias/While");
	const { DoWhile } = require("../dist/ast/sentencias/DoWhile");
	const { For } = require("../dist/ast/sentencias/For");

	const { Break } = require("../dist/ast/sentencias/Break");
	const { Continue } = require("../dist/ast/sentencias/Continue");
	const { Return } = require("../dist/ast/sentencias/Return");

	const { Funcion } = require("../dist/ast/argumentos/Funcion")
	const { DeclFuncion } = require("../dist/ast/argumentos/DeclFuncion")
	const { OperacionAritmetica } = require("../dist/ast/expresiones/OperacionAritmetica");
	const { OperacionLogica } = require("../dist/ast/expresiones/OperacionLogica");
	const { OperacionRelacional } = require("../dist/ast/expresiones/OperacionRelacional");
	const { Parentesis } = require("../dist/ast/expresiones/Parentesis");
	const { Identificador } = require("../dist/ast/expresiones/Identificador");
	const { Primitivo } = require("../dist/ast/expresiones/Primitivo");
	const { Tipo } = require("../dist/ast/Tipo");
	const { TipoDeOperacion } = require("../dist/ast/Tipo");
	const { Main } = require("../dist/ast/argumentos/Main");
	const { Parametro } = require("../dist/ast/argumentos/Parametro");
	const { MedAsig } = require("../dist/ast/sentencias/MedAsig");
	const { FullAsig } = require("../dist/ast/sentencias/FullAsig");
	const { LlamadaMetodo } = require("../dist/ast/sentencias/LlamadaMetodo");


	const ListaToken =require( "../dist/ListaToken");
	const { Token } = require("../dist/Token");

	


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ignorando los espacios en blanco
break;
case 1:/* ignore comment line */
break;
case 2:/* ignore comment Multilinea*/
break;
case 3:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"String", yy_.yytext));return 16; 
break;
case 4:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"int", yy_.yytext));return 58; 
break;
case 5:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"boolean", yy_.yytext));return 59; 
break;
case 6:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"double", yy_.yytext));return 60; 
break;
case 7:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"char", yy_.yytext));return 61; 
break;
case 8:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"void", yy_.yytext));return 13; 
break;
case 9:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"public", yy_.yytext));return 11; 
break;
case 10:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"static", yy_.yytext));return 12; 
break;
case 11:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"main", yy_.yytext));return 14; 
break;
case 12:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"args", yy_.yytext));return 19; 
break;
case 13:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"class", yy_.yytext));return 'class_'; 
break;
case 14:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"interface", yy_.yytext));return 'interface_'; 
break;
case 15:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"do", yy_.yytext));return 47; 
break;
case 16:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"while", yy_.yytext));return 45; 
break;
case 17:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"for", yy_.yytext));return 48; 
break;
case 18:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"if", yy_.yytext));return 'if_'; 
break;
case 19:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"else", yy_.yytext));return 'else_'; 
break;
case 20:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"break", yy_.yytext));return 51; 
break;
case 21:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"continue", yy_.yytext));return 52; 
break;
case 22:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"return", yy_.yytext));return 53; 
break;
case 23:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"System", yy_.yytext));return 'System_'; 
break;
case 24:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"out", yy_.yytext));return 'out_'; 
break;
case 25:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"print", yy_.yytext));return 'print_'; 
break;
case 26:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"decimal", yy_.yytext));return 77; 
break;
case 27:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"numero", yy_.yytext));return 78; 
break;
case 28:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"cadena", yy_.yytext));return 79; 
break;
case 29:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"true", yy_.yytext));return 80; 
break;
case 30:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"false", yy_.yytext));return 81; 
break;
case 31:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"identificador", yy_.yytext));return 37; 
break;
case 32:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"abrirLlave", yy_.yytext));return 54; 
break;
case 33:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"cerrarLlave", yy_.yytext));return 55; 
break;
case 34:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"abrirPar", yy_.yytext));return 15; 
break;
case 35:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"cerrarPar", yy_.yytext));return 20; 
break;
case 36:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"abrirCor", yy_.yytext));return 17; 
break;
case 37:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"cerrarCor", yy_.yytext));return 18; 
break;
case 38:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"igual", yy_.yytext));return 43; 
break;
case 39:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"coma", yy_.yytext));return 41; 
break;
case 40:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"puntocoma", yy_.yytext));return 34; 
break;
case 41:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"incremento", yy_.yytext));return 33; 
break;
case 42:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"decremento", yy_.yytext));return 35; 
break;
case 43:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"mas", yy_.yytext));return 62; 
break;
case 44:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"menos", yy_.yytext));return 63; 
break;
case 45:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"por", yy_.yytext));return 64; 
break;
case 46:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"division", yy_.yytext));return 65; 
break;
case 47:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"mayorIgual", yy_.yytext));return 'mayorIgual'; 
break;
case 48:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"menorIgual", yy_.yytext));return 71; 
break;
case 49:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"mayor", yy_.yytext));return 74; 
break;
case 50:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"menor", yy_.yytext));return 75; 
break;
case 51:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"dosIgual", yy_.yytext));return 72; 
break;
case 52:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"distinto", yy_.yytext));return 73; 
break;
case 53:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"or", yy_.yytext));return 66; 
break;
case 54:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"and", yy_.yytext));return 67; 
break;
case 55:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"not", yy_.yytext));return 69; 
break;
case 56:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"xor", yy_.yytext));return 68; 
break;
case 57:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"punto", yy_.yytext));return 'punto_'; 
break;
case 58:
break;
case 59:
break;
case 60:return 5;
break;
case 61: 
		
		console.error('Error léxico: ' + yy_.yytext + ', line: ' + yy_.yylloc.first_line + ', column: ' + yy_.yylloc.first_column); 
	
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:String\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:void\b)/i,/^(?:public\b)/i,/^(?:static\b)/i,/^(?:main\b)/i,/^(?:args\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:System\b)/i,/^(?:out\b)/i,/^(?:print\b)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:"[^\"]*")/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:=)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:\.)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}