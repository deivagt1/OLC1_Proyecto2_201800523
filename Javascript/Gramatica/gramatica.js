/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[1,14],$V5=[1,13],$V6=[5,9,10,15],$V7=[5,9,10,15,34,59],$V8=[1,32],$V9=[1,36],$Va=[1,33],$Vb=[1,40],$Vc=[1,37],$Vd=[1,38],$Ve=[1,39],$Vf=[1,41],$Vg=[1,46],$Vh=[1,49],$Vi=[9,11,14,27,30,81,82,83,84],$Vj=[1,65],$Vk=[9,14,27,30,81,82,83,84],$Vl=[1,81],$Vm=[19,59],$Vn=[2,64],$Vo=[1,83],$Vp=[1,96],$Vq=[1,89],$Vr=[1,87],$Vs=[1,88],$Vt=[1,91],$Vu=[1,92],$Vv=[1,93],$Vw=[1,94],$Vx=[1,95],$Vy=[1,97],$Vz=[1,106],$VA=[1,105],$VB=[1,113],$VC=[9,11,14,27,29,30,51,65,67,69,72,73,74,75,81,82,83,84,86,92,100,101,102,103,104,105],$VD=[1,116],$VE=[1,122],$VF=[1,123],$VG=[1,118],$VH=[1,119],$VI=[1,120],$VJ=[1,121],$VK=[1,124],$VL=[1,125],$VM=[1,126],$VN=[1,127],$VO=[1,128],$VP=[1,129],$VQ=[1,130],$VR=[1,131],$VS=[1,132],$VT=[19,34,48,49,59,85,86,87,88,89,90,91,93,94,95,96,97,98],$VU=[1,156],$VV=[1,164],$VW=[1,158],$VX=[1,159],$VY=[1,157],$VZ=[1,161],$V_=[1,162],$V$=[1,163],$V01=[1,160],$V11=[12,19],$V21=[34,59],$V31=[19,34,59,85,86,87,88,89,90,91,93,94,95,96,97,98],$V41=[9,11,14,27,30,51,65,67,69,72,73,74,75,77,81,82,83,84],$V51=[11,14,30,51,65,67,69,72,73,74,75,81,82,83,84],$V61=[48,49],$V71=[2,59],$V81=[1,194],$V91=[19,34,59,85,86,89,90,91,93,94,95,96,97,98],$Va1=[19,34,59,89,90,91,93,94,95,96],$Vb1=[19,34,59,89,90,91,95,96],$Vc1=[19,34,59,89,90,91,93,94,95,96,97,98],$Vd1=[1,212],$Ve1=[11,29,86,92,100,101,102,103,104,105];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"LISTA_CLASES":4,"EOF":5,"ERROR":6,"CLASE":7,"SIMBOLOREC":8,"public_":9,"class_":10,"identificador_":11,"abrirLlave_":12,"ARGUMENTOS":13,"cerrarLlave_":14,"interface_":15,"ARGSINTERFAZ":16,"ARGSINTERFAZ1":17,"SIMBOLORECSENTENCIA1":18,"puntocoma_":19,"DECLARARFUNCION":20,"DECLARACION":21,"ARGUMENTOS1":22,"FUNCION":23,"ASIGNACION":24,"MAIN":25,"static_":26,"void_":27,"main_":28,"abrirPar_":29,"String_":30,"abrirCor_":31,"cerrarCor_":32,"args_":33,"cerrarPar_":34,"BLOQUE_SENTENCIAS":35,"SENTENCIAS":36,"SENTENCIAS_G":37,"SIMBOLORECSENTENCIA":38,"FOR":39,"WHILE":40,"DOWHILE":41,"IF":42,"BREAK":43,"CONTINUE":44,"RETURN":45,"LLAMADAMETODO":46,"JUSTID":47,"incremento_":48,"decremento_":49,"PRINT":50,"System_":51,"punto_":52,"out_":53,"print_":54,"EXPRESION":55,"println_":56,"LISTA_PARAMETROS_LLAMADA":57,"PARAMETROS1":58,"coma_":59,"PARAM1":60,"TIPO":61,"COSASDECLARACION":62,"COSASDECLA":63,"igual_":64,"while_":65,"CONDICION":66,"do_":67,"DOWHILE2":68,"for_":69,"DECLARACIONASIGNACION":70,"INCRDCR":71,"break_":72,"continue_":73,"return_":74,"if_":75,"ELSE":76,"else_":77,"LISTA_PARAMETROS":78,"PARAMETROS":79,"PARAM":80,"int_":81,"boolean_":82,"double_":83,"char_":84,"mas_":85,"menos_":86,"por_":87,"division_":88,"or_":89,"and_":90,"xor_":91,"not_":92,"mayorIgual_":93,"menorIgual_":94,"dosIgual_":95,"distinto_":96,"mayor_":97,"menor_":98,"PRIMITIVO":99,"decimal_":100,"numero_":101,"cadena_":102,"true_":103,"false_":104,"null_":105,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"public_",10:"class_",11:"identificador_",12:"abrirLlave_",14:"cerrarLlave_",15:"interface_",19:"puntocoma_",26:"static_",27:"void_",28:"main_",29:"abrirPar_",30:"String_",31:"abrirCor_",32:"cerrarCor_",33:"args_",34:"cerrarPar_",48:"incremento_",49:"decremento_",51:"System_",52:"punto_",53:"out_",54:"print_",56:"println_",59:"coma_",64:"igual_",65:"while_",67:"do_",69:"for_",72:"break_",73:"continue_",74:"return_",75:"if_",77:"else_",81:"int_",82:"boolean_",83:"double_",84:"char_",85:"mas_",86:"menos_",87:"por_",88:"division_",89:"or_",90:"and_",91:"xor_",92:"not_",93:"mayorIgual_",94:"menorIgual_",95:"dosIgual_",96:"distinto_",97:"mayor_",98:"menor_",100:"decimal_",101:"numero_",102:"cadena_",103:"true_",104:"false_",105:"null_"},
productions_: [0,[3,2],[3,2],[4,2],[4,1],[4,2],[7,6],[7,5],[7,6],[7,5],[7,4],[7,4],[7,5],[7,5],[16,2],[16,1],[16,2],[18,1],[18,1],[17,2],[17,1],[17,1],[13,2],[13,1],[8,1],[8,1],[6,1],[22,1],[22,1],[22,1],[22,1],[25,11],[36,2],[36,1],[38,1],[38,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,3],[37,3],[37,1],[50,9],[50,9],[46,3],[57,3],[57,2],[58,3],[58,1],[58,2],[60,2],[60,1],[47,1],[21,3],[62,3],[62,1],[63,3],[63,1],[24,4],[40,3],[41,3],[68,3],[66,3],[39,8],[43,2],[44,2],[45,3],[42,3],[42,4],[76,2],[76,2],[70,1],[70,1],[70,3],[70,3],[71,2],[71,2],[35,2],[35,3],[35,3],[35,4],[23,5],[23,5],[23,2],[23,4],[23,4],[23,1],[20,4],[20,4],[78,2],[78,3],[79,3],[79,1],[79,2],[80,2],[61,1],[61,1],[61,1],[61,1],[61,1],[55,3],[55,3],[55,3],[55,3],[55,2],[55,2],[55,2],[55,3],[55,3],[55,3],[55,2],[55,3],[55,3],[55,3],[55,3],[55,3],[55,3],[55,3],[55,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		var root = new AST($$[$0-1]);
		return root; 
	
break;
case 2:

		var root = new AST([]);
		return root; 
	
break;
case 3: case 14: case 32:

		$$[$0-1].push($$[$0]);
		this.$ = $$[$0-1];
	  
break;
case 4: case 15: case 23: case 33: case 55: case 62: case 99:

		this.$ = [$$[$0]];
	
break;
case 5:
	
		console.log("error del mundo");	
		this.$ = [];
break;
case 6:
 this.$ = new Clase($$[$0-3], $$[$0-1], true,0, this._$.first_line, this._$.first_column ); 
break;
case 7:
 this.$ = new Clase($$[$0-2], [], true,0, this._$.first_line, this._$.first_column ); 
break;
case 8:
 this.$ = new Clase($$[$0-3], $$[$0-1], false,2, this._$.first_line, this._$.first_column ); 
break;
case 9:
 this.$ = new Clase($$[$0-2], [], false,2, this._$.first_line, this._$.first_column ); 
break;
case 10:
 this.$ = new Clase($$[$0-2], [], true,1, this._$.first_line, this._$.first_column ); 
break;
case 11:
 this.$ = new Clase($$[$0-2], [], false,3, this._$.first_line, this._$.first_column ); 
break;
case 12:
 this.$ = new Clase($$[$0-3], $$[$0-1], true,1, this._$.first_line, this._$.first_column ); 
break;
case 13:
 this.$ = new Clase($$[$0-3], $$[$0-1], false,3, this._$.first_line, this._$.first_column ); 
break;
case 16:
	
		console.log("error de interfaz");	
		this.$ = [];
break;
case 17: case 24: case 34:
console.log("salvado por ;");this.$ = [];
break;
case 18: case 25: case 35:
console.log("salvado por }");this.$ = [];
break;
case 19: case 20: case 21: case 27: case 28: case 29: case 30: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 48: case 78: case 79: case 125:
 this.$ = $$[$0]; 
break;
case 22:
	
		$$[$0-1].push($$[$0]);
		this.$ = $$[$0-1];
	  
break;
case 26:
console.log(yytext);ListaToken.errorTokens.push(new Token(this._$.first_line,this._$.first_column,"Sintanctico", 'Se encontr√≥ "' + yytext + '" y se esperaba ";".'  ));  
break;
case 31:

		this.$ = new Main($$[$0-7], $$[$0], this._$.first_line, this._$.first_column)
	
break;
case 46: case 80:
 this.$ = new OperacionAritmetica( TipoDeOperacion.INCREMENTO, $$[$0-2], null, this._$.first_line, this._$.first_column); 
break;
case 47: case 81:
 this.$ = new OperacionAritmetica( TipoDeOperacion.DECREMENTO, $$[$0-2], null, this._$.first_line, this._$.first_column); 
break;
case 49:
 this.$ = new Print( 0, $$[$0-2], this._$.first_line, this._$.first_column); 
break;
case 50:
 this.$ = new Print( 1, $$[$0-2], this._$.first_line, this._$.first_column); 
break;
case 51:
 this.$ = new LlamadaMetodo($$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 52: case 69: case 86: case 97:
 this.$ = $$[$0-1]; 
break;
case 53: case 96:
 this.$ = [] 
break;
case 54: case 61: case 98:

		$$[$0-2].push($$[$0]);
		this.$ = $$[$0-2];
	  
break;
case 56:
 
		console.log("error de parametros1");
		this.$ = [] 
break;
case 57: case 101:
this.$ = new Parametro($$[$0-1], $$[$0], this._$.first_line, this._$.first_column)
break;
case 58:
this.$ = new Parametro(null, $$[$0], this._$.first_line, this._$.first_column)
break;
case 59:
 this.$ = new Identificador( $$[$0], this._$.first_line, this._$.first_column); 
break;
case 60:
 this.$ = new Declaracion($$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 63:
 this.$ = new FullAsig($$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 64:
 this.$ = new MedAsig($$[$0], this._$.first_line, this._$.first_column); 
break;
case 65:
 this.$ = new Asignacion($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 66:
 this.$ = new While($$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 67:
		 
		if($$[$0] != null){
			console.log($$[$0]);
			this.$ = new DoWhile($$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
		} else{
			this.$ = null;
		}
	
break;
case 68:
this.$ = $$[$0-1]
break;
case 70:
 this.$ = new For($$[$0-5], $$[$0-4],$$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 71:
 this.$ = new Break($$[$0-1], this._$.first_line, this._$.first_column)
break;
case 72:
 this.$ = new Continue($$[$0-1], this._$.first_line, this._$.first_column)
break;
case 73:
 this.$ = new Return($$[$0-2],$$[$0-1], this._$.first_line, this._$.first_column)
break;
case 74:
 this.$ = new IF($$[$0-1],$$[$0],null, this._$.first_line, this._$.first_column)
break;
case 75:
 this.$ = new IF($$[$0-2],$$[$0-1],$$[$0], this._$.first_line, this._$.first_column)
break;
case 76:
 this.$ = new Else($$[$0],null,0, this._$.first_line, this._$.first_column)
break;
case 77:
 this.$ = new Else(null,$$[$0],1, this._$.first_line, this._$.first_column)
break;
case 82: case 111:
 this.$ = new OperacionAritmetica( TipoDeOperacion.INCREMENTO, $$[$0-1], null, this._$.first_line, this._$.first_column); 
break;
case 83: case 112:
 this.$ = new OperacionAritmetica( TipoDeOperacion.DECREMENTO, $$[$0-1], null, this._$.first_line, this._$.first_column); 
break;
case 84:
 this.$ = []; 
break;
case 85:
console.log("camino 2"); this.$ = []; 
break;
case 87:
console.log("camino 1"); this.$ = $$[$0-1];  
break;
case 88: case 91:
 this.$ = new Funcion(Tipo.VOID, $$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 89: case 92:
 this.$ = new Funcion($$[$0-3], $$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 90: case 93:
this.$ = $$[$0]
break;
case 94:
 this.$ = new DeclFuncion(Tipo.VOID, $$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 95:
 this.$ = new DeclFuncion($$[$0-3], $$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 100:
 
		console.log("error de parametros");
		this.$ = [] 
break;
case 102:
 this.$ = Tipo.INT 
break;
case 103:
 this.$ = Tipo.BOOLEAN 
break;
case 104:
 this.$ = Tipo.DOUBLE 
break;
case 105:
 this.$ = Tipo.STRING 
break;
case 106:
 this.$ = Tipo.CHAR 
break;
case 107:
 this.$ = new OperacionAritmetica( TipoDeOperacion.SUMA, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 108:
 this.$ = new OperacionAritmetica( TipoDeOperacion.RESTA, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 109:
 this.$ = new OperacionAritmetica( TipoDeOperacion.MULTIPLICACION, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 110:
 this.$ = new OperacionAritmetica( TipoDeOperacion.DIVISION, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 113:
 this.$ = new OperacionAritmetica( TipoDeOperacion.NEGATIVO, $$[$0], null, this._$.first_line, this._$.first_column); 
break;
case 114:
 this.$ = new OperacionLogica( TipoDeOperacion.OR, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 115: case 116:
 this.$ = new OperacionLogica( TipoDeOperacion.AND, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 117:
 this.$ = new OperacionLogica( TipoDeOperacion.NOT, $$[$0], null, this._$.first_line, this._$.first_column); 
break;
case 118:
 this.$ = new OperacionRelacional( TipoDeOperacion.MAYORIGUAL, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 119:
 this.$ = new OperacionRelacional( TipoDeOperacion.MENORIGUAL, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 120:
 this.$ = new OperacionRelacional( TipoDeOperacion.DOSIGUAL, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 121:
 this.$ = new OperacionRelacional( TipoDeOperacion.DISTINTO, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 122:
 this.$ = new OperacionRelacional( TipoDeOperacion.MAYOR, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 123:
 this.$ = new OperacionRelacional( TipoDeOperacion.MENOR, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 124:
 this.$ = new Parentesis( $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 126: case 127:
 this.$ = new Primitivo(0, $$[$0], this._$.first_line, this._$.first_column); 
break;
case 128:
 this.$ = new Primitivo(1, $$[$0], this._$.first_line, this._$.first_column); 
break;
case 129:
 this.$ = new Primitivo(0, true, this._$.first_line, this._$.first_column); 
break;
case 130:
 this.$ = new Primitivo(0, false, this._$.first_line, this._$.first_column); 
break;
case 131:
 this.$ = new Identificador(0, $$[$0], this._$.first_line, this._$.first_column); 
break;
case 132:
 this.$ = new Identificador(0, null, this._$.first_line, this._$.first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:$V1,10:$V2,15:$V3},{1:[3]},{5:[1,9],7:10,9:$V1,10:$V2,15:$V3},{5:[1,11],8:12,14:$V4,19:$V5},o($V6,[2,4]),o([5,11,14,19,30,51,65,67,69,72,73,74,75,81,82,83,84],[2,26]),{10:[1,15],15:[1,16]},{11:[1,17]},{11:[1,18]},{1:[2,1]},o($V6,[2,3]),{1:[2,2]},o($V6,[2,5]),o($V7,[2,24]),o($V7,[2,25]),{11:[1,19]},{11:[1,20]},{12:[1,21]},{12:[1,22]},{12:[1,23]},{12:[1,24]},{9:$V8,11:$V9,13:26,14:[1,25],20:35,21:29,22:27,23:28,24:30,25:31,27:$Va,30:$Vb,61:34,81:$Vc,82:$Vd,83:$Ve,84:$Vf},{2:$V0,6:45,9:$Vg,14:[1,42],16:43,17:44,20:47,21:48,27:$Vh,30:$Vb,61:50,81:$Vc,82:$Vd,83:$Ve,84:$Vf},{9:$V8,11:$V9,13:51,14:[1,52],20:35,21:29,22:27,23:28,24:30,25:31,27:$Va,30:$Vb,61:34,81:$Vc,82:$Vd,83:$Ve,84:$Vf},{2:$V0,6:45,9:$Vg,14:[1,54],16:53,17:44,20:47,21:48,27:$Vh,30:$Vb,61:50,81:$Vc,82:$Vd,83:$Ve,84:$Vf},o($V6,[2,10]),{9:$V8,11:$V9,14:[1,55],20:35,21:29,22:56,23:28,24:30,25:31,27:$Va,30:$Vb,61:34,81:$Vc,82:$Vd,83:$Ve,84:$Vf},o($Vi,[2,23]),o($Vi,[2,27]),o($Vi,[2,28]),o($Vi,[2,29]),o($Vi,[2,30]),{20:59,26:[1,60],27:[1,57],30:$Vb,61:58,81:$Vc,82:$Vd,83:$Ve,84:$Vf},{11:[1,61]},{11:[1,62],62:63,63:64},o($Vi,[2,93]),{64:$Vj},{11:[2,102]},{11:[2,103]},{11:[2,104]},{11:[2,105]},{11:[2,106]},o($V6,[2,11]),{9:$Vg,14:[1,66],17:67,20:47,21:48,27:$Vh,30:$Vb,61:50,81:$Vc,82:$Vd,83:$Ve,84:$Vf},o($Vk,[2,15]),{14:[1,70],18:68,19:[1,69]},{20:71,27:$Vh,30:$Vb,61:72,81:$Vc,82:$Vd,83:$Ve,84:$Vf},o($Vk,[2,20]),o($Vk,[2,21]),{11:[1,73]},{11:[1,74],62:63,63:64},{9:$V8,11:$V9,14:[1,75],20:35,21:29,22:56,23:28,24:30,25:31,27:$Va,30:$Vb,61:34,81:$Vc,82:$Vd,83:$Ve,84:$Vf},o($V6,[2,7]),{9:$Vg,14:[1,76],17:67,20:47,21:48,27:$Vh,30:$Vb,61:50,81:$Vc,82:$Vd,83:$Ve,84:$Vf},o($V6,[2,9]),o($V6,[2,12]),o($Vi,[2,22]),{11:[1,77]},{11:[1,78]},o($Vi,[2,90]),{27:[1,79]},{29:$Vl,78:80},o($Vm,$Vn,{78:82,29:$Vl,64:$Vo}),{19:[1,84],59:[1,85]},o($Vm,[2,62]),{11:$Vp,29:$Vq,55:86,86:$Vr,92:$Vs,99:90,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy},o($V6,[2,13]),o($Vk,[2,14]),o($Vk,[2,16]),o($Vk,[2,17]),o($Vk,[2,18]),o($Vk,[2,19]),{11:[1,98]},{29:$Vl,78:99},o($Vm,$Vn,{78:100,29:$Vl,64:$Vo}),o($V6,[2,6]),o($V6,[2,8]),{29:$Vl,78:101},{29:$Vl,78:102},{28:[1,103]},{12:$Vz,19:$VA,35:104},{2:$V0,6:110,30:$Vb,34:[1,107],61:111,79:108,80:109,81:$Vc,82:$Vd,83:$Ve,84:$Vf},{12:$Vz,19:$VB,35:112},{11:$Vp,29:$Vq,55:114,86:$Vr,92:$Vs,99:90,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy},o($VC,[2,60]),{11:$VD,63:115},{19:[1,117],48:$VE,49:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},{11:$Vp,29:$Vq,55:133,86:$Vr,92:$Vs,99:90,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy},{11:$Vp,29:$Vq,55:134,86:$Vr,92:$Vs,99:90,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy},{11:$Vp,29:$Vq,55:135,86:$Vr,92:$Vs,99:90,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy},o($VT,[2,125]),o($VT,[2,126]),o($VT,[2,127]),o($VT,[2,128]),o($VT,[2,129]),o($VT,[2,130]),o($VT,[2,131]),o($VT,[2,132]),{29:$Vl,78:100},{19:$VA},{19:$VB},{12:$Vz,19:$VA,35:136},{12:$Vz,19:$VB,35:137},{29:[1,138]},o($Vi,[2,91]),o($Vi,[2,94]),{2:$V0,6:140,11:$VU,14:[1,139],21:143,24:144,30:$Vb,36:141,37:142,39:145,40:146,41:147,42:148,43:149,44:150,45:151,46:152,47:153,50:154,51:$VV,61:155,65:$VW,67:$VX,69:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,81:$Vc,82:$Vd,83:$Ve,84:$Vf},o($V11,[2,96]),{34:[1,165],59:[1,166]},o($V21,[2,99]),{8:167,14:$V4,19:$V5},{11:[1,168]},o($Vi,[2,92]),o($Vi,[2,95]),o($Vm,[2,63],{48:$VE,49:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS}),o($Vm,[2,61]),o($Vm,$Vn,{64:$Vo}),o($VC,[2,65]),{11:$Vp,29:$Vq,55:169,86:$Vr,92:$Vs,99:90,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy},{11:$Vp,29:$Vq,55:170,86:$Vr,92:$Vs,99:90,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy},{11:$Vp,29:$Vq,55:171,86:$Vr,92:$Vs,99:90,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy},{11:$Vp,29:$Vq,55:172,86:$Vr,92:$Vs,99:90,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy},o($VT,[2,111]),o($VT,[2,112]),{11:$Vp,29:$Vq,55:173,86:$Vr,92:$Vs,99:90,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy},{11:$Vp,29:$Vq,55:174,86:$Vr,92:$Vs,99:90,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy},{11:$Vp,29:$Vq,55:175,86:$Vr,92:$Vs,99:90,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy},{11:$Vp,29:$Vq,55:176,86:$Vr,92:$Vs,99:90,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy},{11:$Vp,29:$Vq,55:177,86:$Vr,92:$Vs,99:90,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy},{11:$Vp,29:$Vq,55:178,86:$Vr,92:$Vs,99:90,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy},{11:$Vp,29:$Vq,55:179,86:$Vr,92:$Vs,99:90,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy},{11:$Vp,29:$Vq,55:180,86:$Vr,92:$Vs,99:90,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy},{11:$Vp,29:$Vq,55:181,86:$Vr,92:$Vs,99:90,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy},o($V31,[2,113],{48:$VE,49:$VF}),o($V31,[2,117],{48:$VE,49:$VF}),{34:[1,182],48:$VE,49:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},o($Vi,[2,88]),o($Vi,[2,89]),{30:[1,183]},o($V41,[2,84]),{11:$VU,14:[1,184],21:143,24:144,30:$Vb,36:185,37:142,39:145,40:146,41:147,42:148,43:149,44:150,45:151,46:152,47:153,50:154,51:$VV,61:155,65:$VW,67:$VX,69:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,81:$Vc,82:$Vd,83:$Ve,84:$Vf},{11:$VU,14:[1,186],21:143,24:144,30:$Vb,37:187,39:145,40:146,41:147,42:148,43:149,44:150,45:151,46:152,47:153,50:154,51:$VV,61:155,65:$VW,67:$VX,69:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,81:$Vc,82:$Vd,83:$Ve,84:$Vf},o($V51,[2,33]),o($V51,[2,36]),o($V51,[2,37]),o($V51,[2,38]),o($V51,[2,39]),o($V51,[2,40]),o($V51,[2,41]),o($V51,[2,42]),o($V51,[2,43]),o($V51,[2,44]),o($V51,[2,45]),{48:[1,188],49:[1,189]},o($V51,[2,48]),{11:$VD,62:63,63:64},o($V61,$V71,{57:190,29:[1,191],64:$Vj}),{29:[1,192]},{29:$V81,66:193},{12:$Vz,35:195},{29:$V81,66:196},{19:[1,197]},{19:[1,198]},{11:$Vp,29:$Vq,55:199,86:$Vr,92:$Vs,99:90,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy},{52:[1,200]},o($V11,[2,97]),{30:$Vb,61:111,80:201,81:$Vc,82:$Vd,83:$Ve,84:$Vf},o($V21,[2,100]),o($V21,[2,101]),o($V91,[2,107],{48:$VE,49:$VF,87:$VI,88:$VJ}),o($V91,[2,108],{48:$VE,49:$VF,87:$VI,88:$VJ}),o($V31,[2,109],{48:$VE,49:$VF}),o($V31,[2,110],{48:$VE,49:$VF}),o([19,34,59,89],[2,114],{48:$VE,49:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,90:$VL,91:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS}),o([19,34,59,89,90],[2,115],{48:$VE,49:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,91:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS}),o([19,34,59,89,90,91],[2,116],{48:$VE,49:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS}),o($Va1,[2,118],{48:$VE,49:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,97:$VR,98:$VS}),o($Va1,[2,119],{48:$VE,49:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,97:$VR,98:$VS}),o($Vb1,[2,120],{48:$VE,49:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,93:$VN,94:$VO,97:$VR,98:$VS}),o($Vb1,[2,121],{48:$VE,49:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,93:$VN,94:$VO,97:$VR,98:$VS}),o($Vc1,[2,122],{48:$VE,49:$VF,85:$VG,86:$VH,87:$VI,88:$VJ}),o($Vc1,[2,123],{48:$VE,49:$VF,85:$VG,86:$VH,87:$VI,88:$VJ}),o($VT,[2,124]),{31:[1,202]},o($V41,[2,85]),{11:$VU,14:[1,203],21:143,24:144,30:$Vb,37:187,39:145,40:146,41:147,42:148,43:149,44:150,45:151,46:152,47:153,50:154,51:$VV,61:155,65:$VW,67:$VX,69:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,81:$Vc,82:$Vd,83:$Ve,84:$Vf},o($V41,[2,86]),o($V51,[2,32]),{19:[1,204]},{19:[1,205]},{19:[1,206]},{2:$V0,6:210,11:$Vd1,30:$Vb,34:[1,208],58:207,60:209,61:211,81:$Vc,82:$Vd,83:$Ve,84:$Vf},{11:[1,217],21:214,24:215,30:$Vb,47:216,61:155,70:213,81:$Vc,82:$Vd,83:$Ve,84:$Vf},{12:$Vz,35:218},{11:$Vp,29:$Vq,55:219,86:$Vr,92:$Vs,99:90,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy},{65:[1,221],68:220},{12:$Vz,35:222},o($V51,[2,71]),o($V51,[2,72]),{19:[1,223],48:$VE,49:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},{53:[1,224]},o($V21,[2,98]),{32:[1,225]},o($V41,[2,87]),o($V51,[2,46]),o($V51,[2,47]),o($V51,[2,51]),{34:[1,226],59:[1,227]},{19:[2,53]},o($V21,[2,55]),{8:228,14:$V4,19:$V5},{11:[1,229]},o($V21,[2,58]),{11:$Vp,29:$Vq,55:230,86:$Vr,92:$Vs,99:90,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy},o($Ve1,[2,78]),o($Ve1,[2,79]),{48:[1,231],49:[1,232]},o($V61,$V71,{64:$Vj}),o($V51,[2,66]),{34:[1,233],48:$VE,49:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},o($V51,[2,67]),{29:$V81,66:234},o($V51,[2,74],{76:235,77:[1,236]}),o($V51,[2,73]),{52:[1,237]},{33:[1,238]},{19:[2,52]},{11:$Vd1,30:$Vb,60:239,61:211,81:$Vc,82:$Vd,83:$Ve,84:$Vf},o($V21,[2,56]),o($V21,[2,57]),{19:[1,240],48:$VE,49:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},{19:[1,241]},{19:[1,242]},o($V11,[2,69]),{19:[1,243]},o($V51,[2,75]),{12:$Vz,35:244,42:245,75:$V01},{54:[1,246],56:[1,247]},{34:[1,248]},o($V21,[2,54]),{11:[1,251],47:250,71:249},o($Ve1,[2,80]),o($Ve1,[2,81]),o($V51,[2,68]),o($V51,[2,76]),o($V51,[2,77]),{29:[1,252]},{29:[1,253]},{12:$Vz,35:254},{34:[1,255]},{48:[1,256],49:[1,257]},o($V61,$V71),{11:$Vp,29:$Vq,55:258,86:$Vr,92:$Vs,99:90,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy},{11:$Vp,29:$Vq,55:259,86:$Vr,92:$Vs,99:90,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy},o($Vi,[2,31]),{12:$Vz,35:260},{34:[2,82]},{34:[2,83]},{34:[1,261],48:$VE,49:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},{34:[1,262],48:$VE,49:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},o($V51,[2,70]),{19:[1,263]},{19:[1,264]},o($V51,[2,49]),o($V51,[2,50])],
defaultActions: {9:[2,1],11:[2,2],37:[2,102],38:[2,103],39:[2,104],40:[2,105],41:[2,106],208:[2,53],226:[2,52],256:[2,82],257:[2,83]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const { Clase } = require("../dist/ast/clase/Clase");
	const { Instruccion } = require("../dist/ast/Instruccion");
	const { AST } = require("../dist/ast/AST");
	const { Asignacion } = require("../dist/ast/sentencias/Asignacion");
	const { Declaracion } = require("../dist/ast/sentencias/Declaracion");
	const { Print } = require("../dist/ast/sentencias/Print");
	const { While } = require("../dist/ast/sentencias/While");
	const { DoWhile } = require("../dist/ast/sentencias/DoWhile");
	const { For } = require("../dist/ast/sentencias/For");

	const { Break } = require("../dist/ast/sentencias/Break");
	const { Continue } = require("../dist/ast/sentencias/Continue");
	const { Return } = require("../dist/ast/sentencias/Return");

	const { Funcion } = require("../dist/ast/argumentos/Funcion")
	const { DeclFuncion } = require("../dist/ast/argumentos/DeclFuncion")
	const { OperacionAritmetica } = require("../dist/ast/expresiones/OperacionAritmetica");
	const { OperacionLogica } = require("../dist/ast/expresiones/OperacionLogica");
	const { OperacionRelacional } = require("../dist/ast/expresiones/OperacionRelacional");
	const { Parentesis } = require("../dist/ast/expresiones/Parentesis");
	const { Identificador } = require("../dist/ast/expresiones/Identificador");
	const { Primitivo } = require("../dist/ast/expresiones/Primitivo");
	const { Tipo } = require("../dist/ast/Tipo");
	const { TipoDeOperacion } = require("../dist/ast/Tipo");
	const { Main } = require("../dist/ast/argumentos/Main");
	const { Parametro } = require("../dist/ast/argumentos/Parametro");
	const { MedAsig } = require("../dist/ast/sentencias/MedAsig");
	const { FullAsig } = require("../dist/ast/sentencias/FullAsig");
	const { LlamadaMetodo } = require("../dist/ast/sentencias/LlamadaMetodo");

	const { IF } = require("../dist/ast/sentencias/IF");
	const { Else } = require("../dist/ast/sentencias/Else");


	const ListaToken =require( "../dist/ListaToken");
	const { Token } = require("../dist/Token");
	
	


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"String", yy_.yytext));return 30; 
break;
case 4:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"int", yy_.yytext));return 81; 
break;
case 5:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"boolean", yy_.yytext));return 82; 
break;
case 6:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"double", yy_.yytext));return 83; 
break;
case 7:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"char", yy_.yytext));return 84; 
break;
case 8:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"void", yy_.yytext));return 27; 
break;
case 9:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"public", yy_.yytext));return 9; 
break;
case 10:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"static", yy_.yytext));return 26; 
break;
case 11:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"main", yy_.yytext));return 28; 
break;
case 12:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"args", yy_.yytext));return 33; 
break;
case 13:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"class", yy_.yytext));return 10; 
break;
case 14:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"interface", yy_.yytext));return 15; 
break;
case 15:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"do", yy_.yytext));return 67; 
break;
case 16:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"while", yy_.yytext));return 65; 
break;
case 17:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"for", yy_.yytext));return 69; 
break;
case 18:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"if", yy_.yytext));return 75; 
break;
case 19:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"else", yy_.yytext));return 77; 
break;
case 20:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"break", yy_.yytext));return 72; 
break;
case 21:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"continue", yy_.yytext));return 73; 
break;
case 22:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"return", yy_.yytext));return 74; 
break;
case 23:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"System", yy_.yytext));return 51; 
break;
case 24:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"out", yy_.yytext));return 53; 
break;
case 25:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"print", yy_.yytext));return 54; 
break;
case 26:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"println", yy_.yytext));return 56; 
break;
case 27:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"decimal", yy_.yytext));return 100; 
break;
case 28:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"numero", yy_.yytext));return 101; 
break;
case 29:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"cadena", yy_.yytext ));return 102; 
break;
case 30:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"true", yy_.yytext));return 103; 
break;
case 31:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"false", yy_.yytext));return 104; 
break;
case 32:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"null", yy_.yytext));return 105; 
break;
case 33:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"identificador", yy_.yytext));return 11; 
break;
case 34:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"abrirLlave", yy_.yytext));return 12; 
break;
case 35:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"cerrarLlave", yy_.yytext));return 14; 
break;
case 36:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"abrirPar", yy_.yytext));return 29; 
break;
case 37:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"cerrarPar", yy_.yytext));return 34; 
break;
case 38:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"abrirCor", yy_.yytext));return 31; 
break;
case 39:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"cerrarCor", yy_.yytext));return 32; 
break;
case 40:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"coma", yy_.yytext));return 59; 
break;
case 41:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"puntocoma", yy_.yytext));return 19; 
break;
case 42:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"incremento", yy_.yytext));return 48; 
break;
case 43:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"decremento", yy_.yytext));return 49; 
break;
case 44:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"mas", yy_.yytext));return 85; 
break;
case 45:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"menos", yy_.yytext));return 86; 
break;
case 46:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"por", yy_.yytext));return 87; 
break;
case 47:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"division", yy_.yytext));return 88; 
break;
case 48:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"mayorIgual", yy_.yytext));return 93; 
break;
case 49:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"menorIgual", yy_.yytext));return 94; 
break;
case 50:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"mayor", yy_.yytext));return 97; 
break;
case 51:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"menor", yy_.yytext));return 98; 
break;
case 52:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"dosIgual", yy_.yytext));return 95; 
break;
case 53:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"igual", yy_.yytext));return 64; 
break;
case 54:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"distinto", yy_.yytext));return 96; 
break;
case 55:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"or", yy_.yytext));return 89; 
break;
case 56:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"and", yy_.yytext));return 90; 
break;
case 57:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"not", yy_.yytext));return 92; 
break;
case 58:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"xor", yy_.yytext));return 91; 
break;
case 59:ListaToken.tokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"punto", yy_.yytext));return 52; 
break;
case 60:
break;
case 61:
break;
case 62:return 5;
break;
case 63: 
		
		console.error('Error l√©xico: ' + yy_.yytext + ', line: ' + yy_.yylloc.first_line + ', column: ' + yy_.yylloc.first_column+1);
		ListaToken.errorTokens.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"Lexico", 'El caracter "' + yy_.yytext + '" no pertenece al lenguaje.'));  
	
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:String\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:void\b)/i,/^(?:public\b)/i,/^(?:static\b)/i,/^(?:main\b)/i,/^(?:args\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:System\b)/i,/^(?:out\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:"[^\"]*")/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:null\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:;)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:\.)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}